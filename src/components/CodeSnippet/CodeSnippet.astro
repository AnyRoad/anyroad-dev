---
/*
MIT License

Copyright (c) 2022 withastro

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

import rangeParser from 'parse-numeric-range';
import { ShikiBlock } from './shiki-block';
import { InlineMarkingDefinition, LineMarkingDefinition, MarkerType, MarkerTypeOrder } from './types';

export interface Props {
  lang?: string;
  title?: string;
  removedLineIndex?: string;
  removedLineCount?: string;
  lineMarkings?: string;
  inlineMarkings?: string;
}

const {
  lang = '',
  removedLineIndex = '',
  removedLineCount = '',
  title = '',
  lineMarkings = '',
  inlineMarkings = ''
} = Astro.props as Props;

const isTerminal = ['shellscript', 'shell', 'bash', 'sh', 'zsh'].includes(lang);
const intRemovedLineIndex = parseInt(removedLineIndex) || 0;
const intRemovedLineCount = parseInt(removedLineCount) || 0;

// Generate HTML code from the title (if any), improving the ability to wrap long file paths
// into multiple lines by inserting a line break opportunity after each slash
const titleHtml = decodeURIComponent(title).replace(/([\\/])/g, '$1<wbr/>');

// Render the default slot, which contains the syntax-highlighted code in HTML format
// as processed by Astro's Shiki integration
let codeSnippetHtml = await Astro.slots.render('default');

// Mark lines and expressions (if requested)
codeSnippetHtml = applyMarkings(codeSnippetHtml, lineMarkings, inlineMarkings);

function applyMarkings(highlightedCodeHtml: string, strLineMarkings: string, strInlineMarkings: string) {
  const lineMarkings: LineMarkingDefinition[] = parseMarkingDefinition(
    strLineMarkings,
    // Syntax: [mark=|del=|ins=]{2-5,7}
    /^(?:(.*)=){(.+)}$/,
    `Invalid code snippet line marking: Expected a range like "{2-5,7}",
		optionally with one of the prefixes "mark=", "del=" or "ins=", but got "$entry"`
  ).map(({ markerType, groupValues: [content] }) => {
    const lines = rangeParser(content);

    // If any lines were removed during preprocessing,
    // automatically shift marked line numbers accordingly
    const shiftedLines = lines.map((lineNum) => {
      if (lineNum <= intRemovedLineIndex) return lineNum;
      if (lineNum > intRemovedLineIndex + intRemovedLineCount) return lineNum - intRemovedLineCount;
      return -1;
    });

    return {
      markerType,
      lines: shiftedLines
    };
  });

  const inlineMarkings: InlineMarkingDefinition[] = parseMarkingDefinition(
    strInlineMarkings,
    // Syntax for plaintext strings:
    // - Double quotes:   [mark=|del=|ins=]"<Button />"
    // - Single quotes:   [mark=|del=|ins=]'<p class="hi">'
    //
    // Syntax for regular expressions:
    // - Forward slashes: [mark=|del=|ins=]/hi [a-z]+/
    /^(?:(.*)=)([/"'])(.+)\2$/,
    `Invalid code snippet inline marking: Expected either a string in single or double quotes,
		or a RegExp in forward slashes like "/hi [a-z]+/", optionally with one of the prefixes
		"mark=", "del=" or "ins=", but got "$entry"`
  ).map(({ markerType, groupValues: [delimiter, content] }) => {
    let text: string | undefined;
    let regExp: RegExp | undefined;

    if (delimiter === '/') {
      try {
        // Try to use regular expressions with capture group indices
        regExp = new RegExp(content, 'gd');
      } catch (error) {
        // Use fallback if unsupported
        regExp = new RegExp(content, 'g');
      }
    } else {
      text = content;
    }

    return {
      markerType,
      text,
      regExp
    };
  });

  const shikiBlock = new ShikiBlock(highlightedCodeHtml, {
    copyButtonTitle: 'Copy to clipboard',
    copyButtonTooltip: 'Copied!'
  });
  shikiBlock.applyMarkings(lineMarkings, inlineMarkings);
  return shikiBlock.renderToHtml();
}

function parseMarkingDefinition(serializedArr: string, parts: RegExp, parseErrorMsg: string) {
  return serializedArr
    .split(',')
    .map((entry) => decodeURIComponent(entry))
    .map((entry) => {
      const matches = entry.match(parts);
      let rawMarkerType = matches?.[1];
      // Fix common marker type mistakes
      if (rawMarkerType === 'add') rawMarkerType = 'ins';
      if (rawMarkerType === 'rem') rawMarkerType = 'del';
      const markerType = (rawMarkerType as MarkerType) || 'mark';
      const isValid = matches && MarkerTypeOrder.includes(markerType);
      if (entry && !isValid) {
        const formattedParseErrorMsg = parseErrorMsg.replace('$entry', entry).replace(/\r?\n\s+/g, ' ');
        console.error(`*** ${formattedParseErrorMsg}\n`);
      }
      return {
        entry,
        markerType: markerType,
        groupValues: isValid ? matches.slice(2) : []
      };
    })
    .filter((entry) => entry.groupValues.length);
}
---

<style lang='scss' is:global>
  .code-snippet {
    --glow-border: 1px solid var(--theme-glow-highlight);
    position: relative;

    .header,
    pre {
      border: var(--glow-border);
      border-radius: 0.3rem;
      line-height: 1.65;
    }

    .header {
      display: none;
      padding: 0.25rem 1rem 0.25rem 1rem;
      border: 1px solid var(--theme-code-tabs);
      line-height: 1.65;
      z-index: 1;
      position: relative;
      top: 1px;
      background-color: var(--astro-code-color-background);
      color: var(--astro-code-color-text);
      font-size: 0.9rem;
      font-weight: 500;
      letter-spacing: 0.025ch;
      border-bottom-left-radius: 0;
      border-bottom-right-radius: 0;
    }

    .header span {
      color: var(--astro-code-color-text);
    }

    pre {
      margin: 0;
      padding: var(--padding-block) 0;
      border: 1px solid var(--theme-code-tabs);

      &:focus-visible {
        outline: 3px solid var(--theme-accent);
        outline-offset: -3px;
      }

      & > code {
        all: unset;
        display: inline-block;
        min-width: 100%;
        --padding-inline: 1.25rem;

        & > .line {
          --accent-margin: 0rem;
          display: inline-block;
          min-width: calc(100% - var(--accent-margin));
          padding-inline-start: var(--padding-inline);
          padding-inline-end: calc(2 * var(--padding-inline));

          & span {
            position: relative;

            // This pseudo-element makes the background color of empty lines visible
            &.empty::before {
              content: ' ';
            }
          }

          // Support line-level mark/ins/del
          &.mark,
          &.ins,
          &.del {
            --accent-margin: 0rem;
            --accent-width: 0.15rem;
            background: var(--line-marker-bg-color);
            margin-inline-start: calc(var(--accent-margin) - 0.5rem);
            border-inline-start: var(--accent-width) solid var(--line-marker-border-color);
            padding-inline-start: calc(
              var(--padding-inline) - var(--accent-margin) - var(--accent-width)
            ) !important;
            &::before {
              left: 0.5rem;
            }
          }
          &.mark {
            --line-marker-bg-color: var(--theme-code-mark-bg);
            --line-marker-border-color: var(--theme-code-mark-border);
          }
          &.ins {
            --line-marker-bg-color: var(--theme-code-ins-bg);
            --line-marker-border-color: var(--theme-code-ins-border);
            &::before {
              content: '+';
              color: var(--theme-code-ins-text);
            }
          }
          &.del {
            --line-marker-bg-color: var(--theme-code-del-bg);
            --line-marker-border-color: var(--theme-code-del-border);
            &::before {
              content: '-';
              color: var(--theme-code-del-text);
            }
          }

          // Support inline mark/ins/del
          & mark,
          & ins,
          & del {
            all: unset;
            background: var(--inline-marker-bg-color);
            border-radius: 0.05rem;
            padding-inline: 0.05rem;
            margin-inline: 0.1rem;
          }
          & mark {
            --inline-marker-bg-color: var(--theme-code-mark-bg);
            --inline-marker-border-color: var(--theme-code-mark-border);
          }
          & ins {
            --inline-marker-bg-color: var(--theme-code-ins-bg);
            --inline-marker-border-color: var(--theme-code-ins-border);
          }
          & del {
            --inline-marker-bg-color: var(--theme-code-del-bg);
            --inline-marker-border-color: var(--theme-code-del-border);
          }
        }
      }
    }

    .copy-button-wrapper {
      display: flex;
      gap: 0.25rem;
      flex-direction: row-reverse;
      position: absolute;
      top: calc(0.5rem + var(--code-header-height, 0px));
      inset-inline-end: 0.5rem;

      .copy-button {
        display: flex;
        cursor: pointer;
        border-radius: 0.4rem;
        transition: opacity 0.15s linear;
        border: 1px solid var(--theme-dim);
        padding: 0.375rem;
        align-self: flex-start;
        background-color: var(--astro-code-color-background);
        color: var(--theme-code-text);

        @media (hover: hover) {
          & {
            opacity: 0;
          }
        }

        &-success {
          color: hsl(var(--color-green));

          svg {
            fill: hsl(var(--color-green))
          }
        }

        &-error {
          color: hsl(var(--color-red));
          svg {
            fill: hsl(var(--color-red))
          }
        }

        &:focus,
        &:hover {
          border-color: currentColor;
        }
      }
    }
    &:focus-within,
    &:hover {
      .copy-button {
        opacity: 1;
      }
    }

    .copy-button-tooltip {
      --tooltip-arrow-size: 0.375rem;
      --theme-text-sm: 0.875rem;
      display: none;
      position: relative;
      align-self: center;
      background-color: var(--theme-dim);
      color: var(--theme-tooltip-text);
      font-size: var(--theme-text-sm);
      padding: 0.125rem 0.5rem;
      margin: 0;
      border-radius: 0.3rem;
      margin-inline-end: var(--tooltip-arrow-size);

      &::after {
        content: '';
        position: absolute;
        inset-inline-end: calc(-2 * var(--tooltip-arrow-size));
        border: var(--tooltip-arrow-size) solid transparent;
        border-inline-start-color: var(--theme-dim);
        transform: translateY(50%);
      }

      &-visible {
        display: block;
      }
    }

    &.has-title {
      --code-header-height: 2rem;
      & .header {
        display: inline-block;
      }

      & pre {
        border-top-left-radius: 0;
      }
    }

    &.is-terminal {
      --theme-glow-highlight: rgba(255, 255, 255, 0.2);
      --theme-glow-diffuse: rgba(0, 0, 0, 0.4);
      --code-header-height: 1.2rem;

      & .header {
        background: var(--theme-code-tabs);
        display: flex;
        align-items: center;
        justify-content: center;
        padding-bottom: 0.175rem;
        min-height: 1.75rem;
        position: relative;

        &::before {
          content: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 60 16' preserveAspectRatio='xMidYMid meet' fill='rgba(255, 255, 255, 0.15)'%3E%3Ccircle cx='8' cy='8' r='8'/%3E%3Ccircle cx='30' cy='8' r='8'/%3E%3Ccircle cx='52' cy='8' r='8'/%3E%3C/svg%3E");
          position: absolute;
          left: 1rem;
          width: 2.1rem;
          line-height: 0;
        }
      }

      & pre {
        border-top-left-radius: 0;
        border-top-right-radius: 0;
      }
    }

    ::selection {
      color: white;
      background-color: var(--theme-code-selection-bg);
    }
  }
</style>
<div class:list={['code-snippet', isTerminal && 'is-terminal', titleHtml && 'has-title', `lang-${lang}`]}>
  <div class='header'>
    {
      titleHtml ? (
        <span class='title' set:html={titleHtml} />
      ) : (
        isTerminal && <span class='sr-only'>Terminal</span>
      )
    }
  </div>
  <Fragment set:html={codeSnippetHtml} />
</div>
<script>
  // Find all buttons with the \`copy-button\` class on page.
  const buttons = document.querySelectorAll<HTMLButtonElement>('button.copy-button');

  /** Store timeout to clear when button is repeatedly clicked. */
  let copyTimeout: any;

  // Handle clicks on each button.
  buttons.forEach((button) => {
    button.addEventListener('click', async () => {
      const codeText = decodeURIComponent(button.value);
      try {
        clearTimeout(copyTimeout);
        await navigator.clipboard.writeText(codeText);
        button.classList.add('copy-button-success');
        button.nextElementSibling?.classList.add('copy-button-tooltip-visible');
        copyTimeout = setTimeout(() => {
          button.classList.remove('copy-button-success');
          button.nextElementSibling?.classList.remove('copy-button-tooltip-visible');
        }, 3000);
      } catch (err) {
        clearTimeout(copyTimeout);
        button.classList.add('copy-button-error');
        copyTimeout = setTimeout(() => {
          button.classList.remove('copy-button-error');
        }, 3000);
      }
    });
  });
</script>
